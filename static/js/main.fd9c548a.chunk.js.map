{"version":3,"sources":["components/UploadButton.js","components/ImageResize.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","input","display","UploadButton","classes","handleFiles","files","console","log","resizeFile","file","Promise","resolve","Resizer","imageFileResizer","onChange","a","image","element","document","createElement","url","window","URL","createObjectURL","filename","name","href","download","click","revokeObjectURL","Array","from","forEach","f","ImageResize","className","accept","id","multiple","type","e","target","htmlFor","Button","variant","color","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uTAMMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,KAG1BC,MAAO,CACLC,QAAS,YAIE,SAASC,IACtB,IAAMC,EAAUT,IAEVU,EAAc,SAACC,GACnBC,QAAQC,IAAIF,GCnBD,SAAqBA,GAElC,IAAMG,EAAa,SAACC,GAAD,OACnB,IAAIC,SAAQ,SAACC,GAkBXC,IAAQC,iBACNJ,EAjBe,KAEC,KAKK,OAHP,GAIC,GACO,SAACD,GACvBG,EAAQH,KAES,YAkBfM,EAAQ,uCAAG,WAAOL,GAAP,qBAAAM,EAAA,+EAEOP,EAAWC,GAFlB,OAEPO,EAFO,OAGbV,QAAQC,IAAI,QAASS,GAEfC,EAAUC,SAASC,cAAc,KACjCC,EAAMC,OAAOC,IAAIC,gBAAgBP,GACjCQ,EAAWR,EAAMS,KACvBR,EAAQS,KAAON,EACfH,EAAQU,SAAWH,EACnBP,EAAQW,QACRP,OAAOC,IAAIO,gBAAgBT,GAXd,kDAabd,QAAQC,IAAI,MAAZ,MAba,0DAAH,sDAiBEuB,MAAMC,KAAK1B,GACnB2B,SAAQ,SAACC,GAAD,OAAOnB,EAASmB,MDjC9BC,CAAY7B,IAGd,OACE,sBAAK8B,UAAWhC,EAAQN,KAAxB,UACE,uBACEuC,OAAO,UACPD,UAAWhC,EAAQH,MACnBqC,GAAG,wBACHC,UAAQ,EACRC,KAAK,OACLzB,SAAU,SAAC0B,GAAD,OAAOpC,EAAYoC,EAAEC,OAAOpC,UAExC,uBAAOqC,QAAQ,wBAAf,SACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,UAAU,OAAtD,yBEzBOC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAACjC,EAAD,OCMS8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,SAM1BZ,M","file":"static/js/main.fd9c548a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport ImageResize from './ImageResize'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nexport default function UploadButton() {\r\n  const classes = useStyles();\r\n\r\n  const handleFiles = (files) => {\r\n    console.log(files)\r\n    ImageResize(files)\r\n  } \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={classes.input}\r\n        id=\"contained-button-file\"\r\n        multiple\r\n        type=\"file\"\r\n        onChange={(e) => handleFiles(e.target.files)}\r\n      />\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import Resizer from \"react-image-file-resizer\";\r\n\r\nexport default function ImageResize(files) {\r\n\r\n  const resizeFile = (file) =>\r\n  new Promise((resolve) => {\r\n\r\n    const maxWidth = 1920\r\n    // const maxWidth = 1280\r\n    const maxHeight = 1920\r\n    // const maxHeight = 1280\r\n    const quality = 75\r\n    // const quality = 50\r\n    // const quality = 25\r\n    const compressFormat = 'JPEG'\r\n    const rotation = 0\r\n    const responseUriFunc = (resizeFile) => {\r\n      resolve(resizeFile)\r\n    }\r\n    const outputType = 'file'\r\n    // const minWidth = 1280\r\n    // const minHeight = 1280\r\n\r\n    Resizer.imageFileResizer(\r\n      file,\r\n      maxWidth,\r\n      maxHeight,\r\n      compressFormat,\r\n      quality,\r\n      rotation,\r\n      responseUriFunc,\r\n      outputType,\r\n      // minWidth,\r\n      // minHeight,\r\n    );\r\n  });\r\n\r\n  const onChange = async (file) => {\r\n    try {\r\n      const image = await resizeFile(file);\r\n      console.log('image', image);\r\n\r\n      const element = document.createElement('a');\r\n      const url = window.URL.createObjectURL(image);\r\n      const filename = image.name;\r\n      element.href = url;\r\n      element.download = filename;\r\n      element.click();\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (err) {\r\n      console.log('err', err);\r\n    }\r\n  };\r\n  \r\n  const fileArr = Array.from(files)\r\n  fileArr.forEach((f) => onChange(f))\r\n}\r\n","import './App.css';\nimport UploadButton from './components/UploadButton'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UploadButton />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}